@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage

@inject IJSRuntime JSRuntime
@inject ProtectedSessionStorage ProtectedSessionStore

@rendermode InteractiveServer

<script src="js/sessionStorageHelper.js"></script>

<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">BlockChat</a>
    </div>
</div>

<input type="checkbox" title="Navigation menu" class="navbar-toggler" />

<div class="nav-scrollable" onclick="document.querySelector('.navbar-toggler').click()">
    <nav class="nav flex-column">

        <div class="nav-item px-3">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="bi bi-house-door-fill-nav-menu" aria-hidden="true"></span> Home
            </NavLink>
        </div>

        @if (AuthStatus != null) {
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="newchat" Match="NavLinkMatch.All">
                    <span class="bi bi-plus-square-fill-nav-menu" aria-hidden="true"></span> New Chat
                </NavLink>
            </div>
        } 

        @foreach (var chat in ChatNames)
        {
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="@($"/chat?user={chat}")" Match="NavLinkMatch.All">
                    <span class="bi bi-list-nested-nav-menu" aria-hidden="true"></span> @chat
                </NavLink>
            </div>
        }

    </nav>
</div>

@code {
    private string? AuthStatus = null;
    private List<string> ChatNames = new List<string> {};
    protected override async Task OnAfterRenderAsync(bool firstRender) {
        if (!firstRender) return;
        AuthStatus = (await ProtectedSessionStore.GetAsync<string>("token")).Value;
        if (AuthStatus != null) { // user is authorized
            ChatNames = (await JSRuntime.InvokeAsync<List<string>>("sessionStorageHelper.getAllKeys"))
                .Where(s => s.Contains("chat."))
                .ToList()
                .Select(s => s.StartsWith("chat.") ? s.Substring("chat.".Length) : s)
                .ToList();
        }
        StateHasChanged();
    }
}